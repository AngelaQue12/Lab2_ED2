// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = ON       // Power-up Timer Enable bit (PWRT enabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3/PGM pin has PGM function, low voltage programming enabled)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)
#define _XTAL_FREQ 4000000
#define __delay_us(x) _delay((unsigned long)((x)*(_XTAL_FREQ/4000000.0)))

// Definici√≥n de pines para la interfaz con la pantalla LCD
#define RS RC4
#define EN RC5
#define D0 RD0
#define D1 RD1
#define D2 RD2
#define D3 RD3
#define D4 RD4
#define D5 RB5
#define D6 RD6
#define D7 RD7

#include <xc.h>
#include <stdint.h>
#include "LCD.h" 
#include "adc.h" 
#include "usart.h" 
#include <stdio.h>
#include <stdlib.h>

// Variables globales
char frec, tr, rc, con;
int vol1, vol2, x;
char buffer[5];
char vol1_str[5];
char cen, dec, uni;
float pot = 0;

char GetCentenas(int value) {
    return (value / 100);
}

void UART_write(unsigned char* word){
    while (*word != 0){
        TXREG = (*word);
        while(!TXSTAbits.TRMT);
        word++;
    }
    return;
}

void Division(char y){
    cen = (y / 100);
    dec = ((y % 100) / 10);
    uni = ((y % 100) % 10);
}

void __interrupt() isr(void){
    if (ADIF){
        if (ADCON0bits.CHS == 0){
            pot = ADRESH; 
        }
        ADIF = 0; 
    }
    
    if (RCIF){
        if (RCREG == '+'){
            con++; 
        }
        else if (RCREG == '-'){
            con--; 
        }
        else if (RCREG == '*'){
            x = 1; 
        }
        RCIF = 0; 
    }
    
    return;
}

void main(void) {
    ANSEL = 0x03; 
    ANSELH = 0x00; 
    TRISA = 0x03;
    TRISB = 0x00;
    TRISC = 0x80; 
    TRISD = 0x00;
    
    OSCCONbits.IRCF = 0B110;
    OSCCONbits.OSTS = 0;
    OSCCONbits.SCS = 1;
    
    ADC_CONF(4); 
    USART_CONF(4, 1, 1); 
    
    INTCONbits.PEIE = 1;
    PIE1bits.ADIE = 1; 
    PIE1bits.RCIE = 1; 
    ADCON0bits.GO = 1; 
    Lcd_Init(); 
    RCIF = 0;
  
    Lcd_Clear();
    Lcd_Set(1,1);
    Lcd_Write_Str("POT:    CONT:");
    UART_write("* = pot ");
    UART_write("+ o - = contador");
    INTCONbits.GIE = 1; 
    
    while(1){
        ADC_IF(); 
        PORTB = con;         
        vol1 = (float)pot*1.961;
        
        cen = GetCentenas(vol1);
        sprintf(vol1_str, "%d.%d", cen, (vol1 % 100)); 
        
        Division(con); 
        
        // Mostrar los valores en el LCD
        Lcd_Set(2, 1); 
        Lcd_Write_Str(vol1_str);
        Lcd_Set(2, 10);
        sprintf(buffer, "%d", cen);
        Lcd_Write_Str(buffer);
        sprintf(buffer, "%d", dec);
        Lcd_Write_Str(buffer);
        sprintf(buffer, "%d", uni);
        Lcd_Write_Str(buffer);
        
        if (x == 1){
            x = 0;
            UART_write("\r \0");
            sprintf(buffer, "%.2dV  ", vol1); 
            UART_write("POT 1: ");
            UART_write(buffer); 
            UART_write("\r \0"); 
        }
    }
}
